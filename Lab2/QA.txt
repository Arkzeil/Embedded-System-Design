ref: From internet and bard
5.1 What are the cmake and make for? What is the relationship between them?
	make:智能的批處理工具，它本身並沒有編譯和鏈接的功能，通過調用makefile文件中用戶指定的命令來進行編譯和鏈接的
	cmake:簡單的生成makefile文件給上面那個make用，可以跨平台生成對應平台能用的makefile。根據一個叫CMakeLists.txt文件（學名：組態檔）去生成makefile

5.2 Why there are so many arguments in the compilation command(step 4.4.2)? What are they for?
	-I dir
    		Add the directory dir to the list of directories to be searched for header files.  Directories named
    		by -I are searched before the standard system include directories.
	-Wl,option
    		Pass option as an option to the linker.  If option contains commas, it is split into multiple options
    		at the commas.  You can use this syntax to pass an argument to the option.
	-lpthread:
		程式內含有<pthread.h>，編譯需額外加上-lpthread，因為該header在標準linux的import library內沒有，需在編譯時連結
	

5.3 What is libopencv_world.so.3.4.7 for? Why do we need to use LD_LIBRARY_PATH=. ./demo to run the 
executable? What would happen if we just run with ./demo? Why?
	
	libopencv_world.so: a shared library that contains all of the OpenCV functions. It is a convenient way to include OpenCV in your project, as you only need to link to a single library
	LD_LIBRARY_PATH: 一個環境變數，讓runtime linker (ld.so)去多找LD_LIBRARY_PATH所指定的路徑。

5.4 It is so complex and difficult to show a picture by using the framebuffer. Why don’t we just use cv::imshow() to do 
this work?
	cv::imshow() function in OpenCV is used to display an image in a window. However, embedded systems typically do not have graphical user interfaces (GUIs), so there is 	no window to display the image in.

5.5 What is a framebuffer?
	framebuffer是一塊內存，里面存放著一幀圖像，每幀圖像包含每個像素顏色值。BPP，像素深度，指存儲每個像素所用的位數。內容對應於螢幕上的界面顯示
	Framebuffer就是一段存儲空間，其可以位於顯存，也可以位於內存。只要是在GPU能夠訪問的空間範圍內(GPU的物理地址空間)，任意分配一段內存(或顯存)，都可以作為Framebuffer使用

5.6 What is the result of the command below? Why?
sudo cat /dev/fb0 > fb0
	Save the content of current frame buffer(usually means the image currently displayed on screen) to 'fb0' file in current directory.
sudo cat fb0 > /dev/fb0
	Load the previous saved frame buffer to the device frame buffer. In other words, display the image we just saved to 'fb0' in last command on screen.

5.7 You can find there is a file named fb1 under /dev directory. What is the difference between /dev/fb0 and /dev/fb1? 
Why we use /dev/fb0 rather than /dev/fb1?
	dev/fb0 is the primary framebuffer device, while /dev/fb1 is a secondary framebuffer device. The primary framebuffer device is used to display the image that is 	visible on the screen, while the secondary framebuffer device can be used to display other images, such as a splash screen or a console
	If you need to display an image on the screen, you should use the primary framebuffer device, /dev/fb0. If you need to display an image that is not visible on the 	screen, such as a splash screen or a console, you can use the secondary framebuffer device, /dev/fb1